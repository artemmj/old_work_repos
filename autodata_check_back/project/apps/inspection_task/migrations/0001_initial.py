# Generated by Django 3.0.2 on 2023-02-08 08:22

import django.core.validators
from django.db import migrations, models
import django_lifecycle.mixins
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InspectionTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('fio', models.CharField(max_length=100, verbose_name='ФИО контактного лица')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Пример, +79510549236', max_length=128, region=None, verbose_name='Номер телефона контактного лица')),
                ('start_date', models.DateField(verbose_name='Дата начала осмотра')),
                ('end_date', models.DateField(verbose_name='Дата конца осмотра')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('inspector_search', 'Поиск инспектора'), ('task_accepted', 'Задание принято'), ('inspection_appointed', 'Назначен осмотр'), ('inspection_date_confirmed', 'Дата осмотра подтверждена'), ('paid', 'Оплачено')], default='draft', max_length=25, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Задание на осмотр',
                'verbose_name_plural': 'Задания на осмотр',
                'ordering': ('-created_at',),
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InspectionTaskCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Порядковый номер')),
                ('vehicle_type', models.CharField(max_length=100, verbose_name='Тип ТС')),
                ('brand', models.CharField(max_length=100, verbose_name='Марка')),
                ('model', models.CharField(max_length=100, verbose_name='Модель')),
                ('vin', models.CharField(max_length=100, verbose_name='VIN-номер')),
            ],
            options={
                'verbose_name': 'Авто задания на осмотр',
                'verbose_name_plural': 'Авто задания на осмотр',
                'ordering': ('serial_number',),
            },
        ),
        migrations.CreateModel(
            name='InspectionTaskSearch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('level', models.PositiveSmallIntegerField(default=0, verbose_name='Уровень поиска')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Начало поиска')),
                ('start_time_iter', models.DateTimeField(auto_now_add=True, verbose_name='Начало итерации поиска')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активная')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_accepted', models.NullBooleanField(default=None, verbose_name='Принял/Отклонил')),
            ],
            options={
                'verbose_name': 'Приглашение',
                'verbose_name_plural': 'Приглашения',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
